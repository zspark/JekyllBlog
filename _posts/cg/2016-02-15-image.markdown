---
layout: post_with_wisdom
title: "图形文件降色与压缩" 
date:   2016-02-15
categories: jekyll CG
published: true
excerpt: ""
wisdom: 软件就像熵：难以把握，没有重量，服从热力学第二定律；比如说，它总是在增长。 —— 诺曼·奥古斯丁（ Norman Augustine），洛克希德马丁公司前总裁
meta: 
subImgPath: cg\image\
author: 
tags: [image,format,compression]
---
*这是我学习《计算机图形学》第三版，第15章 图形文件格式 时的笔记*

{{site.blank}}全彩色的光栅文件非常大，大多数文件格式采用某种压缩方法来减少存储和传输的文件尺寸。使用RGB颜色并且未压缩的光栅化文件称为原始数据(raw data) 向量文件格式(vector file format),通过一系列坐标位置和描述性直线段、填充区域、圆弧、样条曲线和其他图形元素的信息来存储图画。
既支持几何表示、又支持光栅表示的文件格式称为混合格式(hybrid format)或元文件(metafile);

##降色方案
{{site.blank}}有时降色方案也称为量化，量化就是从一个连续的分布中得到离散数据的过程。

###均匀降色
* 整体除以2，让颜色从8位255级降为7位127级；也可以不同的分量降不同的位数，比如红色分量降3位，蓝色降1位等。
* 用一块区域的颜色的中值或平均值代替整个这块区域的颜色；

###频率降色
统计一共出现的颜色的频率，然后按照需要保留使用频率最高的颜色；

###中值切割降色
1. 分别统计RGB三个分量颜色出现的范围，形成区间颜色立方体；
2. 选择差距最大的分量经行中值计算，将得出的中值作为分割线将区间颜色立方体分割成更多的子立方体；
3. 选择所有子立方体中最大的子块作为下一步要处理的立方体，然后执行2；
4. 直到用户想要的分割精度为止；
5. 将所有在同一个子块中的像素填充为该块的中值颜色；

##压缩方案
无损压缩：lossless compression
有损压缩：lossy compression

###行程编码
将一行中的颜色按照：重复次数+颜色值 来表示，
比如:
20，20，20，34，44，78，30，30，30，30，30，30；
经过行程编码后是：
03，20，01，34，01，44，01，78，06，30；
可以看到不重复的也需要加上数量（数量1），这样压缩比在颜色比较艳丽的图像中不但不高反而会小于1；

改进了的行程编码是将不重复的颜色数量用负数表示，同样上面原始数据压缩后为：
03，20，-03，34，44，78，06，30；
意思就是34，44，78这三个颜色没有重复；

###LZW编码（Lempel、Ziv、Welch）
LZW编码是一种基于字典的编码，或者说是替代编码，就是将原始数据中一段重复较高的数据用另一个简单的字符/字符串代替，从高降低文件大小。这就需要维护一个表用来映射简短字符/字符串与原始数据。

###霍夫曼编码（Huffman）
霍夫曼编码是种变长编码，它的核心思想是为原始数据中出现频率最高的赋予最简短的编码，它的特点是任何一个编码都不会是其他编码的前缀，比如如果0是一个编码的话，就不可能出现01，001，011等编码，关于霍夫曼编码的介绍特别多，我知道的有一期《程序员》杂志上就用了上下两篇文章介绍了霍夫曼编码，内容涉及霍夫曼实现该编码的简单历史，读来有趣且实用。

###算数编码（Arithmetic coding）
算数编码相较霍夫曼编码比较晚才出现，可能是为了解决诸如霍夫曼编码压缩比理论上不足的问题。算数编码利用原始数据中各个基础码出现的频率而计算的，其最后的结果是个浮点数，去掉小数点与之前的0，就是一组有限的01序列。当初我有个小疑惑就是，这玩意怎么解码，不知道频率，不知道字符的。后来突然反应过来；算数编码仅仅是个信息的编码思想而已，不是加密算法。所以在提供最后的01序列的同时，还要提供有多少个基础码，分别什么频率等等。解码的时候根据给出的频率像编码一样，计算一个区间，查看给出的序列是否在这个区间，在的话就继续细分计算、比较，最后得到给出的原始信息。

###离散余弦变换
这个压缩算法没有细看，仅作了了解。

==EOF==

[url_huffman]:[http://blog.jobbole.com/20091/]
