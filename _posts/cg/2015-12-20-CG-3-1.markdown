---
layout: post_with_wisdom_mathjax
title:  "《交互式计算机图形学》复习笔记三（上）"
date:   2016-01-01
categories: jekyll CG
published: true
excerpt: ""
wisdom: 如果你以为用户是白痴，那就只有白痴才用它。 —— 李纳斯·托沃兹（Linus Torvalds），LINUX之父
meta: 
author: 
subImgPath: cg\cg3\
tags: [计算机图形学 computer-graphics cg CG]
---

##第三章 几何对象和变换

{{site.blank}}前面几节说了下简单的线性代数，比如向量加法、减法、内积、外积、凸性、直线、平面什么的，非常基础。

###三维图元
{{site.blank}}二维图元比较简单，比如点、线段、三角形等，但毕竟我们生活在三维空间中，不可避免要涉及到三维图元的思考。在三维图元中，会遇到至少两个问题：

> 1.三维图元的数学定义可能会很复杂；<br>
> 2. 三位对象如此之多，我们也只能对图形系统能有效实现的对象感兴趣，现有的图形系统不能支持所有的三位对象，除非通过近似的方法；<br>

图形学发展至今，前辈们选择了使用网格的形式描述三维对象。这些三位对象具有以下特征：

> 1.可以通过其表面来描述外观，并且认为对象是中空的；<br>
> 2.可以由三维空间中的一组定点来确定；<br>
> 3.表面要么可以用平面（2D）凸多边形来组成，要么可以通过平面凸多边形来近似；<br>

###标架
{{site.blank}}我们在中学开始接触的解析几何就是在三维空间中进行的，其中三维空间是建立在坐标系中。想想那个时候的坐标系有什么东西吧：一个被称为原点的点，外加3个互相垂直的向量，向量虽然没有位置的概念，但这里的三个向量必须要以原点为起始点去建立。标架的描述性定义于此类同但不限于刚才的描述，具体而言就是去掉“相互垂直”与“三维”这两个约束，即：一个指定的点（被称为原点）外加空间中的一个基（基的构建要以原点为起点）。至于标架与坐标系有什么关系，我觉得坐标系范围更广比如还有极坐标系，球面坐标系等等而且坐标系这个概念更通俗，就是哪个学科都能说“来，我们先建立个坐标系。”，而标架的概念应该更加专业，更加与具体的科学相关。

{{site.blank}}标架的表示没有严格的要求，比如交计图中采用$$\{x,y,z,原点\}$$的形式来描述标架，而[百度百科][url_frame_baidu]中使用$${原点;x,y,z}$$的形式，我么采用交计图中的形式。现在说一下格式中“原点”的含义，原点无非空间中的一个特殊的点，而点是离不开具体标架的，从这层含义来说当指定一个具体标架后，其中原点的定义是与该标架的基相关的，只不过各个分量为0。但千万不要与其他标架下的原点混淆，认为他们是同一个标架，更不要认为是同一个点，所以不同标架下原点之间的关系，依然是建立在具体标架下的。

###齐次表示
{{site.blank}}我们在中学就开始接触三维空间，比如当时的解析代数。三维空间中的一个点P，其表示方式就是$$(x,y,z)$$，三维空间中的一个没有位置概念的向量也是(x,y,z)，如果将这种没有明确区分点与向量表达式的方式用在计图里面，那将是一片混乱，最简单的来说我们就难以使用流水线形式处理几何对象。说到这里我觉得自己编程的思想与图形系统绘制管线颇为相似，我始终觉得一个管理类型的对象在控制对象的过程中不应该为特殊对象走判断条件，比如初始化一个控制渲染的对象，一旦初始化成功它就进入帧循环模式，就需要不停的渲染”当前对象“，而“当前对象”的创建是由用户动态指定的。此时可以采用两种方式，一种是在帧循环中写入if..else..，另一种是初始化成功就给“当前对象”创建没有实际效果的渲染对象实例。我编程从来偏向使用第二种方式，始终觉得if..else..除了浪费性能外别无它用，当然这是题外话。于是发展出来用四位齐次坐标的形式描述他们（至于为什么叫“齐次”，我始终没有正确理解）。

我们用(x,y,z,1)表示空间中一个点，用(x,y,z,0)表示空间中一个向量，其中0，1可不是随意安排，他们是来自数学定义。我们知道任何一个向量空间都有无数个基，在指定一个具体的基后，其空间中的任何一个向量可以唯一的表示成$$v=aw_x+bw_y+cw_z$$写成矩阵形式就是: 
$$v=[a,b,c] \left[\begin{matrix} w_x\\w_y\\w_z \end{matrix} \right]$$ 
而一个仿射空间的点在给定标架下的表示是:
$$P=[a,b,c] \left[\begin{matrix} w_x\\w_y\\w_z \end{matrix} \right]+P_0$$
意思就是$$P_0$$是开始点，然后移动了一个向量后的表示；如果没有开始点，那么就是加上了标架的原点，写成这种方式更普遍一些。现在我们尝试将$$P_0$$写入矩阵，试图用一个矩阵表示完整个过程，无论如何在三维矩阵下是做不到的，只有扩展到四维矩阵下才可以，因为多出来的一个维度可以用来存储额外的信息。于是$$P$$点我们可以写成

$$P=[a,b,c,1] \left[\begin{matrix} w_x\\w_y\\w_z\\P_0 \end{matrix} \right]$$

**注意：上式从数学的角度看没有问题，但是从仿射空间的定义来看有错误的地方，错误出在仿射空间没有定义标量与点的运算（参见这里），所以我们需要约定：
$$1P=P$$ ，意思是标量1与任何一个点相乘还是这个点，（没有约定其它非零标量与点相乘的含义，例如不能刻意认为标量3乘以点P，是将点P放大3倍或者其他什么意思。）**

{{site.blank}}到目前我们至少明确区分了在计图中点与向量的表示：一个用三维矩阵三维向量，一个用四维矩阵思维向量。从数学上讲这是对的没有问题。但是要知道我们的管线是流水线形式的，任何数据试图用统一的方式进行处理，现在使用特别频繁的点与向量用两种维度的矩阵、向量表示岂不是有违流水线的意思。于是前辈们苦心经营，**约定了$$0P=0$$ ，意思是标量0与任何一个点相乘就是原点（0，0，0）**，这样一来，只要给定标架，空间中任何一个向量可以表示为：

$$v=[a,b,c,0] \left[\begin{matrix} w_x\\w_y\\w_z\\P_0 \end{matrix} \right]$$

至此，我们才统一了在计图中点与向量的表示方式：点就是(x,y,z,1)，向量就是(x,y,z,0)，没准这也是为什么叫“齐次表示”的一个原因吧:)

###标架变换
{{site.blank}}标架变换是个很重要的概念，涉及到的问题就是：空间中同一个点在不同的标架下分别是什么表示，怎么互相转换。我们先布置一个环境：有一个标架$$v\{v_1,v_2,v_3,v0\}$$，在v标架下有一个点$$P=(a,b,c,1)$$；有另一个标架$$u\{u_1,u_2,u_3,u0\}$$，它与v标架的关系如下：

$$
\begin{align}
u_1 &=2v_1\\
u_2 &=v_1+v_2\\
u_3 &=v_1+v_2+3v_3\\
u0  &=v0+(2,2,2,0)\\
\end{align}
$$

其中(2,2,2,0)是v标架下的一个方向，表示v下的原点需要移动自己标架下定义的(2,2,2,0)这个方向后就会与标架u在空间中指定的原点u0重合。 好了，现在要求计算点P在u标架下的表示。我们先将标架v与u的关系写成矩阵的形式：

$$
\left[u_1,u_2,u_3,u0 \right]^T
=\left[
\begin{matrix}
2,0,0,0\\
1,1,0,0\\
1,1,3,0\\
2,2,2,1\\
\end{matrix}
\right]
\left[v_1,v_2,v_3,v0 \right]^T
$$

然后假设点P在u标架下的表示为(d,e,f,1)，于是：

$$
P=(a,b,c,1)v=(d,e,f,1)u=(d,e,f,1)\left[
\begin{matrix}
2,0,0,0\\
1,1,0,0\\
1,1,3,0\\
2,2,2,1\\
\end{matrix}
\right]v
$$

可以得到(a,b,c,1)与(d,e,f,1)之间的关系：

$$
(a,b,c,1)=(d,e,f,1)
\left[
\begin{matrix}
2,0,0,0\\
1,1,0,0\\
1,1,3,0\\
2,2,2,1\\
\end{matrix}
\right]
$$

把矩阵写左边就是：

$$
(a,b,c,1)^T=
\left[
\begin{matrix}
2,1,1,2\\
0,1,1,2\\
0,0,1,2\\
0,0,0,1\\
\end{matrix}
\right]
(d,e,f,1)^T=
\left[
\begin{matrix}
2,0,0,0\\
1,1,0,0\\
1,1,3,0\\
2,2,2,1\\
\end{matrix}
\right]^T
(d,e,f,1)^T=M(d,e,f,1)^T
$$

上面等式就说明了同一个空间下两个不同的标架之间的变换关系，从等式中可以看到u标架下的任何一个点的坐标右乘矩阵M就可以得到该点在v空间下的坐标；

###平移、缩放、旋转、切变
{{site.blank}}空间中最基本的变换莫过于上面这四种了。根据此前的推导，我们可以得出平移变换矩阵M的样子：

####平移

$$
M=\left[
\begin{matrix}
1,0,0,a\\
0,1,0,b\\
0,0,1,c\\
0,0,0,1
\end{matrix}
\right]
$$

####缩放：

$$
M=\left[
\begin{matrix}
a,0,0,0\\
0,b,0,0\\
0,0,c,0\\
0,0,0,1
\end{matrix}
\right]
$$

####旋转
{{site.blank}}旋转相对复杂，我们先针对物体仅仅围绕x轴的旋转来说明，想象空间中一个点，围绕其标架下的x轴旋转，此时只有该点的x轴上的分量不变化，而y、z轴上的分量都会发生变化。如下图所示，当点A(a,b)围绕x轴旋转了$$\beta$$角度之后到A'(c,d)位置，两点的坐标关系如下（其中L表示点与原点的距离）:

![img][img0] 

$$a=Lcos\alpha \\
b=Lsin\alpha \\
c=Lcos(\alpha+\beta)=Lcos\alpha cos\beta-Lsin\alpha sin\beta =acos\beta -bsin\beta \\
d=Lsin(\alpha+\beta)=Lsin\alpha cos\beta +Lsin\alpha cos\beta =bsin\beta +acos\beta \\
$$

写成矩阵形式就是：

$$
A'=\left[
\begin{matrix}
cos\beta,-sin\beta\\
sin\beta,cos\beta\\
\end{matrix}
\right]A
$$

写成四维齐次坐标的形式就是：

$$
M=\left[
\begin{matrix}
1,0,0,0\\
0,cos\beta,-sin\beta,0\\
0,sin\beta,cos\beta,0\\
0,0,0,1
\end{matrix}
\right]
$$

{{site.blank}}空间中物体围绕其标架的y轴、z轴旋转的情况如此类同，一样的推导就能得出。


####错切（切变）
{{site.blank}}错切变换好比对象自身将自己一层一层偏离了原来的地方，如图二所示。原来的物体是淡绿色方形，经过错切变换后成了淡粉色形状，D、C两点不变，A点移动到了A'，B点移动到了B'（其y坐标没有变化）。从图中我们明显能看到y值越大，其偏里原来坐标的程度就越强（参考F点的偏移量），现在写出A与A'的坐标关系： $$ (A')_x=A_x+A_ycot\alpha $$

![img][img2] 图二

写成矩阵的形式：

$$
A'=\left[
\begin{matrix}
1,cot\alpha , 0,0\\
0,1,0,0\\
0,0,1,0\\
0,0,0,1
\end{matrix}
\right]A
$$

###变换的级联
{{site.blank}}级联，就是将一系列基本变换合在一起达到组合表现的效果，级联需要注意的是前后变换矩阵的顺序。从图三中可以看出，点A先旋转$$\alpha$$角度后再平移a就是点C，而先平移再旋转就是点D。我们一般将矩阵写在左边（点A的左边），形如$$A'=TA$$，就是说点A进行T变化。变化后如果需要后续变化的话，继续写在左边（最左边），形如$$A'=RTA$$，意思就是，先进行T变化，再进行R变化。因为矩阵乘法满足结合律，所以我们可以先计算出RT相乘的结果M，然后再应用到A点，就像这样$$A'=(RT)A$$，别小看这么一个简单的优化，渲染管线中一个批次要处理少则几千几万，多则几十万甚至上百万的顶点，倘若每个顶点都先乘T再乘R，肯定比只乘M理论上慢一倍。而将矩阵R，T相乘试图在以后减少对顶点的变化次数，这个思想就是级联。

![img][img7] 图三

###绕任意顶点的旋转
{{site.blank}}初学矩阵变化的童鞋可能会犯这样的错误，就是将旋转矩阵
$$
R=\left[
\begin{matrix}
cos\theta,-sin\theta\\
sin\theta,cos\theta\\
\end{matrix}
\right]
$$
的旋转当成了物体绕自己的旋转，这个一定要注意。

![img][img9] 图 旋转变化是物体绕其标架原点的旋转

![img][img10] 图 物体绕其中心点旋转60度的情况（透明红色是旋转后的形状）

{{site.blank}}但实际问题会涉及到大量的物体自旋的情况，比如RPG游戏中某个逗B玩家无聊打转转，再比如乒乓球游戏中模拟空中高速旋转的乒乓球等等。我们处理物体绕定点旋转的思路一般是先将物体的旋转中心平移回标架原点（连同物体），然后旋转，最后再平移回去。图 4.1中A是旋转中心，$$\Delta BCD$$是要旋转的物体，现将A平移回原点，图中可见其平移向量是$$u=(-2,-3)$$，$$\Delta B'C'D'$$就是原来物体平移u后的位置；然后旋转60度，物体旋转依然是围绕其原点的，但此时原点与我们想要的旋转中心恰巧在一起，此时的旋转就是物体绕旋转中心的旋转，见图4.2；第三步将旋转后的$$\Delta EFG$$再反向平移之前移动的向量，使其旋转中心回到原来的位置，见图4.3，这样就完成了物体绕任意点的旋转操作见图4.4。

![img][img_rotate_1] 图 4.1
![img][img_rotate_2] 图 4.2
![img][img_rotate_3] 图 4.3
![img][img_rotate_4] 图 4.4

OpenGL中的物体是靠图元来定义的，而图元是由顶点来组成的，所以物体的变换其实质是组成物体的点的变换，因此变换物体就是变换顶点。我们将刚才的系列变化写成矩阵如下：

$$
\begin {align}
P' & =T^{-1}RTP \\
& =
\left[
\begin{matrix}
1,0,0,2\\
0,1,0,3\\
0,0,1,0\\
0,0,0,1
\end{matrix}
\right]

\left[
\begin{matrix}
cos60,-sin60,0,0\\
sin60,cos60,0,0\\
0,0,1,0\\
0,0,0,1
\end{matrix}
\right]

\left[
\begin{matrix}
1,0,0,-2\\
0,1,0,-3\\
0,0,1,0\\
0,0,0,1
\end{matrix}
\right]P\\
& =
\left[
\begin{matrix}
cos60,-sin60,0,-2cos60 +sin60 +2\\
sin60,cos60,0,-3cos60-2sin60+3\\
0,0,1,0\\
0,0,0,1
\end{matrix}
\right]P\\
& =
\left[
\begin{matrix}
0.5,-0.866,0,3.598\\
0.866,0.5,0,0.232\\
0,0,1,0\\
0,0,0,1
\end{matrix}
\right]P
\end{align}
$$

{{site.blank}}P是要旋转的顶点，P'是旋转后的位置，T是平移变换矩阵，R是旋转变换矩阵，$$T^{-1}$$就是T的逆矩阵。我们可将图4.1中B点坐标(2.2,0.92)带入计算，粗算下的结果为(3.908,2.1)，与图4.4中E'点坐标(3.9,2.14)基本一样。跳出计算过程我们发现，整个示例就是围绕平行于Z轴的直线在旋转，只不过这条直线通过了A点。这与标题所谓的”绕任意点的旋转”不太吻合。的确是这样，书中这一小节的核心就是此前我们提到的思路“先平移到原点，再旋转，最后平移回去”。如果觉得不过瘾，非要绕给定点旋转，那这本身就不是个严密的问题，因为绕空间中一个点的旋转多了去了，可以上下旋转，左右旋转等等等等，所以我们旋转的重点要看下节：饶任意给定直线的旋转。


[vedio1]:[https://www.youtube.com/watch?v=8p76pJsUP44]
[url2]:https://github.com/opentk/opentk/issues/18
[url3]:http://www.cnblogs.com/caster99/p/4752354.html
[url4]:https://www.opengl.org/sdk/docs/man/

[img0]:{{site.basepath}}{{site.imgpath}}{{page.subImgPath}}image_cg3_0.jpg "img0"
[img2]:{{site.basepath}}{{site.imgpath}}{{page.subImgPath}}image_cg3_2.jpg "img2"
[img7]:{{site.basepath}}{{site.imgpath}}{{page.subImgPath}}image_cg3_7.jpg "img7"
[img9]:{{site.basepath}}{{site.imgpath}}{{page.subImgPath}}image_cg3_9.jpg "img9"
[img10]:{{site.basepath}}{{site.imgpath}}{{page.subImgPath}}image_cg3_10.jpg "img10"
[img_rotate_1]:{{site.basepath}}{{site.imgpath}}{{page.subImgPath}}image_cg3_rotate_1.jpg "img_rotate_1"
[img_rotate_2]:{{site.basepath}}{{site.imgpath}}{{page.subImgPath}}image_cg3_rotate_2.jpg "img_rotate_2"
[img_rotate_3]:{{site.basepath}}{{site.imgpath}}{{page.subImgPath}}image_cg3_rotate_3.jpg "img_rotate_3"
[img_rotate_4]:{{site.basepath}}{{site.imgpath}}{{page.subImgPath}}image_cg3_rotate_4.jpg "img_rotate_4"

[url5]:http://www.xuebuyuan.com/839988.html 
[url_frame_baidu]:http://baike.baidu.com/link?url=KQcj9hrh_YUsPeaY-KBuCtaLyp8yUINBk4YBxtcPOv3WyIazTUhNCmFXEhQBVwGACeoAgFhBgSfJtsQbVlimUK
==TBC== 
