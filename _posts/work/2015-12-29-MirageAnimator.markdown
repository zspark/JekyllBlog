---
layout: post
title:  "MirageAnimator使用指南(0.8.2)"
date:   2015-12-31
category: work
published: true
excerpt: ""
meta: 
author: 
tags: [work]
---
## 1 介绍
{{site.blank}}MirageAnimator是一款基于Mirage引擎，纯AS3语言开发的开源序列帧动画编辑器。通过简单的拖拽、属性的设置、对帧的编辑来完成一个动画，解放出更多的程序开发人员参与游戏逻辑的开发中。Mirage Animator提供新建、预览、保存等功能，可以随时看到动画的样式，导出来的格式方便Mirage提供的解决方案使用。

## 2 特点
* 快速启动：MirageAnimator轻量级的设计使得工具启动速度得到了很大提升;
* 简单编辑：MirageAnimator通过简单的拖拽、属性的设置、对帧的编辑来完成一个动画，简单轻便。解放单纯无聊的一遍遍程序中参数的调整;
* 预览功能：设计动画的过程中可以及时预览，方便开发;

## 3 使用指南

### 3.1 布局
{{site.blank}}Animator界面上分布着7个区域，如下图所示，彩色文字与对应颜色区域明确表示，里面还有左上角的黑色区域，是菜单区（点击后出现）。

![Img][img_1] 图 Animator主界面

### 3.2 添加资源
{{site.blank}}在开始使用Animator之前，首先要将序列帧资源拷贝到asserts\\目录下，没有该目录可以新建，也可以运行Animator让程序为您创建。拷贝到asserts\\下的资源没有目录结构的约定。拷贝完毕后就可以打开Animator进行编辑了，点击资源库asserts扩展三角箭头，就能看到刚才拷贝的所有资源，左键单击可以在“预览资源区”查看资源内容（目前支持png与jpg），如图3.2.1。

![Img][img_2] 图3.2.1

### 3.3 导入资源到展示区
{{site.blank}}右键双击一个资源后会将该资源导入展示区，Animator会自动识别可能是序列帧的资源，并弹出提示告诉用户是否同意将一系列资源导入展示区，见图3.3.1。选择“确定”的话，Animator会将当前双击的资源连同后续的资源一起导入**（注意：这里是后续资源，之前的资源尽管可能是一些列的，也不会导入）**，并且填充时间轴上从帧头开始的后续空白/关键帧。选择“取消”的话，只会导入双击的唯一资源。

![Img][img_3] 图3.3.1

### 3.4 编辑资源数据
{{site.blank}}用户可以点击展示区中的资源，然后在右侧编辑区进行资源偏移、高宽、缩放数据的编辑，图3.4.1。

![Img][img_4] 图3.4.1

### 3.5 时间轴的操作
{{site.blank}}时间轴就是位于软件正下方的有幕轨的一块区域，如图3.5.1。

![Img][img_5] 图3.5.1

{{site.blank}}时间轴区域里有针对时间轴的编辑按钮![Img][img_6] ，依次是：**清除帧 、 复制帧 、 粘贴帧 、 剪切帧 、 插入帧 、 删除帧**。还有下方的幕轨区域，其中名称见下图

![Img][img_7]![Img][img_9]

**编辑按钮说明**

* 清除帧：如果当前帧是个关键帧，则删除当前帧的内容，使其成为空白帧；如果是空白帧则不予理会；
* 复制帧：复制当前帧里的内容到剪贴板，等待粘贴帧时候使用；
* 粘贴帧：粘贴剪贴板中最近一次复制、剪切的关键帧内容到当前帧；
* 剪切帧：将当前帧中的内容剪切到剪贴板，当前帧执行清除操作；
* 插入帧：在当前帧后面插入一空白帧，其原本后面的所有帧（空白或者关键帧）依次后移；
* 删除帧：删除掉当前帧（包括其内容）；

**幕轨操作**

{{site.blank}}用户可以拖动帧头左右移动进行当前帧的改变，这种方式亦可用来简单预览序列帧播放的效果；也可以左键单击不同的帧（空白或者关键帧）直接选择想要的当前帧；

### 3.6 保存、打开编辑文件
{{site.blank}}当用户编辑动画期间需要将当前的内容作为一个外部文件存储的时候，就需要保存编辑文件。保存按钮有两处可供选择：一处位于主界面工具栏内，形状像个软盘的按钮，另一处位于菜单栏内，从文字中清晰可见。点击保存按钮后，Animator会弹出来“保存文件”窗口，用户选择好目录，并且输入想要存储的名字后（名字可以不带mvd扩展），点击“保存”按钮，即可将资源内容保存至选中的目录下。同样，想要打开一个已保存的mvd文件的话，点击“打开文件”按钮（与“保存”按钮所在位置一致），选择好文件点击“打开”按钮即可。**注意：mvd文件中的资源依然是从asserts\\目录下查找的，所以不要轻易删掉不确定使用与否的资源。**

### 3.7 发布动画
{{site.blank}}尽管mvd文件中有保存的数据，但是这些文件仅仅是用来再次编辑时候使用的，它们不是最终的文件。最终发布动画的时候需要依次点击：菜单-发布动画，在弹出的“发布动画”窗口中输入一个全新的动画配置文件名，就会将本次编辑的动画数据保存到指定的文件里面，如图3.7.1。

![Img][img_8] 图3.7.1

用户可以在“保存文件”窗口中选择之前创建的某个动画配置文件，从而将本次新编辑的动画内容追加在文件后面，如图3.7.2。

![Img][img_12] 图3.7.2

>一般的做法并不是每个动画文件在发布的时候都创建不同的文件，而是选择使用追加模式。

保存的内容其实非常简单，如果是创建新文件，就给新文件写入图3.7.3中的全部内容；如果是追加文件，就向旧有文件追加写入图3.7.3中的第二行内容；

![Img][img_11] 图3.7.3

### 3.8 文件使用
首先用土豆库资源管理器导入所有的资源配置文件，然后执行下面这条，将动画配置文件导入项目内存；

{% highlight as3 linenos%}
MovieAsset.appendConfig(movieCfg.txt);
{% endhighlight %}

movieCfg.txt就是Animator发布的动画配置文件。执行完这条语句后表示文件中所有的动画配置数据已经导入内存，想要在舞台上显示的话，首先新建个Movie实例（来自土豆库）,然后指定movieName属性为想要显示的动画名即可（movieName就是图3.7.3中诸如default\_这样的数据），代码见下。

{% highlight as3 %}
var m:Movie=new Movie();
m.movieName="default_";
addChild(m);
{% endhighlight %}

之后对Movie实例的操作就如同其他显示对象一样，具体接口参见土豆库Movie组件；

## 4 关于软件
{{site.blank}}Animator在MIT开源软件协议下发布。被授权人有权利使用、复制、修改、合并、出版发行、散布、再授权及贩售软件及软件的副本。
被授权人可根据程序的需要修改授权条款为适当的内容。同时在授权人在其软件和软件的所有副本中都必须包含版权声明和许可声明。


==EOF==

[img_1]:{{site.imgurl}}Animator/image_animator1.jpg
[img_2]:{{site.imgurl}}Animator/image_animator2.jpg
[img_3]:{{site.imgurl}}Animator/image_animator3.jpg
[img_4]:{{site.imgurl}}Animator/image_animator4.jpg
[img_5]:{{site.imgurl}}Animator/image_animator5.jpg
[img_6]:{{site.imgurl}}Animator/image_animator6.jpg
[img_7]:{{site.imgurl}}Animator/image_animator7.jpg
[img_8]:{{site.imgurl}}Animator/image_animator8.jpg
[img_9]:{{site.imgurl}}Animator/image_animator9.jpg
[img_11]:{{site.imgurl}}Animator/image_animator11.jpg
[img_12]:{{site.imgurl}}Animator/image_animator12.jpg
