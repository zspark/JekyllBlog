---
layout: post_with_wisdom
title:  "《乐三消》开发思维历程"
date:   2015-10-03 11:40:33
category: AS3
published: false
excerpt: ""
wisdom: 软件就是煤气；会扩张至充满整个容器。 —— 纳森·梅尔沃德（Nathan Myhrvold ），微软前CIO
meta: 
author: 
tags: [work,thought]
---

{{site.blank}}这四天来写《开心消消乐》的程序，有所心得，记之。到目前为止，程序应该是被彻底推翻了两次，现在的是第三次。第一次失败的原因是自己对整个系统的抽象度不够，一开始便着眼于‘大局’，于是每创建一个新的类或者新的方法、变量，都试图考虑他们在全局下的定位。刚开始一路顺风，毕竟程序才刚刚起步，感觉自己‘大局观’很强，站的挺高，看的挺远，棒棒哒。可随着程序模块的铺开，游戏系统的复杂度这才慢慢体现出来，于是每次下手编码总感觉碍手碍脚，顾此失彼，导致的结果可能是拆了东墙补西墙，倘若拆了是往好的方向修补倒也罢了，问题在于系统的复杂度是以指数增长，复杂到一定程度后大脑势必应付不过来，也就不肯能‘往好的方向发展了’，于是这次失败了。

{{site.blank}}第二次我便缩小系统开发，着眼于具体功能上。一开始宏观的规划还是有的，但在初步确定后，我便将精力集中于‘下落系统’的上，所谓‘下落系统’，顾名思义就是开心消消乐游戏中的小动物肯定要按照一定的规则在每次消除后下落。我初步完成了类似倒沙子一样的算法，就是一个方块落地后，后继的方块成金字塔形慢慢摆放。demo运行良好，我用一张大的二维数组记录每个格子的状态，又用另一个二维数组记录小动物的状态等等。基本全部以矩阵数组记录任何有用的或者必要的数据。当我写完“失联格子”动态查找其他连通格子的算法后，虽有bug，但整体表现良好，可之后的测试开始让我头疼：表现良好的情况是消除一个格子的时候，当我尝试同一时刻消除2个及更多的时候，整个系统便濒临奔溃，好比倒塌的砖块一样。我花了一个下午尝试去解决这个问题，但没有成功。于是我将问题暂时依然归结到没有较好抽象。

{{site.blank}}貌似我会情不自禁的将问题复杂化，这可能源自人类对完美的追求，但这是人之本性，因此这不是问题的关键，那么我为什么会将问题慢慢复杂化呢？漆黑的背景，下面一张水平面，一个球从高处下落，途中有个静态障碍物，这个小球会发生什么运动。我一遍一遍的想着这个画面，反思着自己。突然想到此前买的《复杂性思考》这本书，那是一本非常薄的书，还没来得及看。但从书名我立刻意识到是不是自己处理问题的方法不对，或者不够好，我缺少对问题复杂性的思考。我立马又联想到公司大牛此前在QQ群里面随口说的数据结构比算法重要云云的话（可能意思变了，此处不代表大牛真实本意）。我想到自己此前移植工作内容较多，忽视了自我对问题的思考过程。 这绝对是愚蠢的行为！ 

{{site.blank}}想了好多，天也开始黑了，没有开灯，径直躺在床上。抽象、数据结构移植绕着我打转。不用多说，第二次失败的原因是因为自己对一个系统的抽象度不够，如果能深入抽象，正确抽象，并且配合恰当的数据结构，复杂问题就会变的越来越具体，从而各个突破；慢慢我有了今天第三套方案的思路。

{{site.blank}}下落的时候还有个问题就是哪个实体被先计算，因为先计算的话就需要决定它是否还能继续下落，不能的话就要锁定这个格子从而不让其他格子进入；这个问题一直困扰着我，是我将问题集中在了对entity的排序上，当然这的确是个解决方案。我的想法是写一套逻辑，让越是子孙节点的entity越排在前面以便越早计算他们的下落数据。这个问题最后得到了解决（但不是完美解决）。问题出在当下落的格子（小动物）与周边的格子发生连续三消后，新的格子该如何插入之前建立的消除序列中。要知道在我的逻辑中，建立起来的队列是不保存entity关于节点之间谁是子，谁是父的逻辑关系的。这个问题烦恼我半天。

{{site.blank}}在我读更新逻辑的时候，我始终感觉这个东西应该很好解决，总有一种呼之欲出的感觉。我脑海中始终觉得所有的entity既然都是同一帧更新到一个新的位置，那么它下一步能不能继续下落应该能计算出来，或者有办法得知的。庆幸的是突然“下一帧”这个概念蹦出了我的脑海，我想既然entity同一帧到达一个新的位置，这一帧肯定是不会继续下落，但是所有的entity在这一帧肯定是要被计算的。如此一来我可以在下一帧开始的时候决定新一轮的entity能不能继续下落不就可以了嘛。这样一来的话，我就不需要之前那个复杂的逻辑去建立entity之间的先后顺序。但是在之后的思考中马上否定了这个想法，因为一个entity能否继续下落是需要去判断的，判断的话就需要前后顺序，否则还是徒劳；

{{site.blank}}本来1.3版本打算把毒液与初级毛球弄出来，但是在一遍遍的测试过程中发现下落子系统存在严重的一个问题，就是1个动物会尝试占据另一个已经被占据的节点，从而引发错误。这几日我努力尝试查出这个bug的来源，但是一无所获。我越来越感觉这是个不得不优先解决的问题。问题的出现是在魔力鸟与直线特效组合使用的时候，因为这个时候你不确定哪些动物会被消除，而且消除后会有250ms的延迟。这个时候最容易导致重叠的出现。


==EOF==
